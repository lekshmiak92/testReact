{"version":3,"sources":["token.js","App.js","serviceWorker.js","index.js"],"names":["TOKEN","App","props","handleStatusChange","userInput","document","getElementById","value","token","console","log","fetch","endPoint","method","headers","body","JSON","stringify","isPlivoEnabled","firebaseId","then","res","Auth","handleError","status","json","data","catch","e","state","style","textAlign","display","id","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NAAaA,G,MACX,ipCCiDaC,E,YA7Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,mBAAqB,WACnB,IAAIC,EAAYC,SAASC,eAAe,WAAWC,MAE/CC,EAAQR,EACZS,QAAQC,IAAIF,GAEZG,MADUC,uEACC,CACTC,OAAQ,MACRC,QAAS,CAEP,kBAAmBN,GAErBO,KAAMC,KAAKC,UAAU,CACnBC,eAAgBd,EAChBe,WAAY,mCAGbC,MAAK,SAAAC,GAEJ,OADA,EAAKC,KAAKC,YAAYF,EAAIG,QACnBH,EAAII,UAEZL,MAAK,SAAAM,GACJjB,QAAQC,IAAIgB,MAEbC,OAAM,SAAAC,GACLnB,QAAQC,IAAIkB,OA3BhB,EAAKC,MAAQ,GAFI,E,sEAiCjB,OACE,oCACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,QAAS,SAC1C,6CACA,2BAAOC,GAAG,YACV,4BAAQC,QAASC,KAAKhC,oBAAtB,a,GAvCQiC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.8f621233.chunk.js","sourcesContent":["export const TOKEN =\n  \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ1OThkYjVjZjE1ZWNhOTI0OWJhZTUzMDYzOWVkYzUzNmMzYzViYjUiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiTGVrc2htaSBBSyIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLXotVHVkVmJqQzBrL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBL0FDSGkzcmRGYWF3b2dxa0pxZnlJd0t6ZmdSdU9mMlpqbWcvbW8vcGhvdG8uanBnIiwiaXNzIjoiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL3F0YWxrcHJvamVjdCIsImF1ZCI6InF0YWxrcHJvamVjdCIsImF1dGhfdGltZSI6MTU3NTk4MDkyNywidXNlcl9pZCI6IlNrNVl1R2hkQzFUcWRvaGF4UW9aU25yTjBEcDIiLCJzdWIiOiJTazVZdUdoZEMxVHFkb2hheFFvWlNuck4wRHAyIiwiaWF0IjoxNTc1OTgwOTI3LCJleHAiOjE1NzU5ODQ1MjcsImVtYWlsIjoibGVrc2htaUBxdWlwaC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJnb29nbGUuY29tIjpbIjEwMDAwNDcyNzgyNjUxMTU5ODQwMSJdLCJlbWFpbCI6WyJsZWtzaG1pQHF1aXBoLmNvbSJdfSwic2lnbl9pbl9wcm92aWRlciI6Imdvb2dsZS5jb20ifX0.LqkRvregJsn1KgIhg2AZYtIv0cHHVQ5A2snkpGGC1CZ3YjlNWGipphSAe5jt7mHyvPqutM9IuLyxqzGc80AVK9FMN6vRGqucQ0CeTWsaaq5dem-_-QHEGPHC2zU0bpzogmVo_otdYENlsNO16B9iaCkRx4pThLbKWuZFsMyC45MGMfkIK7lE7f4xsmLoYEAWDU_GLU0Z7yJYRQ81EZxgROAMB4u7XJUbWGtO8jgYaSL442XD5Q3ID4HN8huCMHQW3HxeR9FeXLlBLg0xwU3SfqWgEnHKm_oyBxGao8_VvcimJUQ7e1Qy4xJt1nWn_JGA2xNjLZBtI4dEMQ9ipTNB7w\";\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { TOKEN } from \"./token\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  handleStatusChange = () => {\n    let userInput = document.getElementById(\"idInput\").value;\n    let endPoint = \"https://mern-app-sample-1.herokuapp.com\";\n    let token = TOKEN;\n    console.log(token);\n    let url = endPoint + \"/changeUserPlivoEnabledState?\";\n    fetch(url, {\n      method: \"put\",\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        \"x-auth-id-token\": token\n      },\n      body: JSON.stringify({\n        isPlivoEnabled: userInput,\n        firebaseId: \"UldvXHBwuKZYVyT4enqVD2PpFvN2\"\n      })\n    })\n      .then(res => {\n        this.Auth.handleError(res.status);\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n  render() {\n    return (\n      <>\n        <div style={{ textAlign: \"center\", display: \"flex\" }}>\n          <h3>Change status</h3>\n          <input id=\"idInput\"></input>\n          <button onClick={this.handleStatusChange}>Set</button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}